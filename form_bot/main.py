from aiogram.utils import executor
from aiogram import Dispatcher, types, Bot
from aiogram.types import ReplyKeyboardRemove 

from btns import skip_btn, blog_link, rew_link, grades
from config import TOKEN, REWIES_ID, BLOG_ID, CURSES, DEV_ID

from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage = storage)

class Form(StatesGroup):
    skiper = State()

    form_header = State()
    main_text = State()
    sharp = State()

@dp.message_handler(commands = 'send_rew')
async def make_a_new_rew(message: types.Message):
    await bot.send_message(message.from_user.id, '–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∏–∂–µ', reply_markup = skip_btn)
    await Form.skiper.set()

@dp.message_handler(commands = 'help')
async def help_func(message: types.Message):
    await bot.send_message(message.from_user.id, '/send_rew - —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤\n/help - —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @c0dem')

@dp.message_handler(commands = 'start')
async def welcome(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ü•≥\n\n–æ—á–µ–Ω—å –Ω–∞–¥–µ—é—Å—å —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç –∏ –≤—ã –±—É–¥–µ—Ç–µ —Ä–∞–¥—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—Å —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º –∏ –¥—Ä—É–∑—å—è–º\n\n–∞ —Ç–µ–ø–µ—Ä—å –ø–æ—Ä–∞ –Ω–∞–ø–∏—Å—Å–∞—Ç—å –æ—Ç–∑—ã–≤, –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"', reply_markup = skip_btn)
    await Form.skiper.set()

@dp.message_handler(state = Form.skiper)
async def cheker(message: types.Message, state: FSMContext):
    await state.update_data(skip = message.text)

    sub_check = await bot.get_chat_member(chat_id = BLOG_ID, user_id = message.from_user.id)
    userstates = ['creator', 'member']

    if sub_check['status'] == userstates[0] or userstates[1] :
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–º–µ—Ä:\n\n–∫—Ä—É—Ç–æ–π –±–æ—Ç <--- –∑–∞–≥–æ–ª–æ–≤–æ–∫\n–æ—Ç {–≤–∞—à_–Ω–∏–∫} <--- (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n\n–æ—Å–Ω–æ–≤–Ω–æ–µ\n–æ–ø–∏—Å–∞–Ω–∏–µ\n–±–æ—Ç–∞\n\n–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç #–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ - (–≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä —Ö–µ—à—Ç–µ–≥–æ–≤)', reply_markup = ReplyKeyboardRemove())
        await bot.send_message(message.from_user.id, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–≥–∞–ª–æ–≤–æ–∫')
        await Form.form_header.set()
    else:
        print(sub_check['status'])        
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–ª–æ–≥ –∫–∞–Ω–∞–ª, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–∞–º —Å—Ç–æ–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', reply_markup = blog_link)

@dp.message_handler(state = Form.form_header)
async def header(message: types.Message, state: FSMContext):
    await state.update_data(header = message.text)
    data = await state.get_data()
    a = False
    for i in CURSES:
        if i.lower() in data['header'].lower():
            await bot.send_message(message.from_user.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–∞ –∏ –¥—Ä. —Å–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup = ReplyKeyboardRemove())
            a = True
            await Form.form_header.set()
            break

    if a == False:
        await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞', reply_markup = ReplyKeyboardRemove()) 
        await Form.main_text.set()
    
@dp.message_handler(state = Form.main_text)
async def main_text_func(message: types.Message, state: FSMContext):
    await state.update_data(main_text = message.text)
    data = await state.get_data()
    a = False
    for i in CURSES:
        if i.lower() in data['main_text'].lower():
            await bot.send_message(message.from_user.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            a = True
            await Form.main_text.set()
            break

    if a == False:
        await bot.send_message(message.from_user.id, '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–µ—à—Ç–µ–≥\n\n–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ | –∫–ª–∞—Å—Å–Ω–æ | –Ω–µ–ø–ª–æ—Ö–æ | –ø–ª–æ—Ö–æ | —É–∂–∞—Å–Ω–æ', reply_markup = grades) 
        await Form.sharp.set()

@dp.message_handler(state = Form.sharp)
async def sharp_func(message: types.message, state: FSMContext):
    await state.update_data(sharp_to_add = message.text)
    data = await state.get_data()

    if data['sharp_to_add'].lower() == '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ' or '–∫–ª–∞—Å—Å–Ω–æ' or '–Ω–µ–ø–ª–æ—Ö–æ' or '–ø–ª–æ—Ö–æ' or '—É–∂–∞—Å–Ω–æ':
        try:
            await bot.send_message(REWIES_ID, f"""{data['header']}\n–æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}\n\n{data['main_text']}\n\n–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç #{data['sharp_to_add']}""")
            await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n–æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏\n\n–≤–≤–µ–¥–∏—Ç–µ /send_rew –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤', reply_markup = rew_link)
            await state.finish()
        except Exception as e:
            await bot.send_message(DEV_ID, f'!–æ—à–∏–±–∫–∞!\n–≤ —Ñ—É–Ω–∫—Ü–∏–∏ - sharp_func\n–æ—à–∏–±–∫–∞ - {e}')
    else:
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤—ã—à–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤')

executor.start_polling(dp)