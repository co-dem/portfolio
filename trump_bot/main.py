from aiogram.utils import executor
from aiogram import Dispatcher, Bot, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.types.message import ContentType

from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

from config import *
from funcs import *

from aiogram.types import ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup


orders = []                             #* variable to store orders (for developer only)
dt = {}                                 #* dt and           are created to make oder process exactlyer
user_data = {}                          #*        user_data
storage = MemoryStorage()               #* memory object
bot = Bot(TOKEN)                        #* bot object
dp = Dispatcher(bot, storage = storage) #* Dispatcher object

class Form(StatesGroup): 
    product = State()
    main_info = State()  


#* function to create an account for user
# userid | username | orderplace | ordertime | product
def login_func(user) -> None:
    global user_data

    # if user doesn't exist, add him 
    if user_data.get(user.from_user.username) == None:
        
        user_data[user.from_user.username] = user.from_user.username 
        user_data[user.from_user.username] = {
            'id'        : user.from_id,
            'username'  : user.from_user.username,
            'product'   : None,    #* product that user ordered
            'main_info' : None
        }
    #* if user already exists, set all data to none
    else:
        user_data[user.from_user.username]['product'] = None
        user_data[user.from_user.username]['main_info'] = None

#* starting function
'''
here we set the access level for user:
basic user | manager | developer

and creating an account for user
'''
@dp.message_handler(commands = ['start', 'order'])
async def welcome(message: types.Message):
    
    upload_products()
    await set_bot_commands(bot = bot)   # setting hot commands
    login_func(user = message)          # creating an account

    print('[log]: new user ->', user_data)

    #* developer access level
    if message.text == '/start' and message.from_id == 798330024:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–º\n—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: developer', reply_markup = developer_panel)
    #* manager access level
    elif message.text == '/start' and message.from_user.id == MANAGER_ID:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!\n–Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –æ—Ç stuff with trump\n—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: manger', reply_markup = manager_panel)
    #* basic user access level
    elif message.text == '/start' and message.from_user.id != MANAGER_ID:
        await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚ù§Ô∏è\n–Ø –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –æ—Ç stuff with trump\n–≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ', reply_markup = user_panel)

    # same
    elif message.text == '/order' and message.from_id == 798330024:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = developer_panel)    
    
    elif message.text == '/order' and message.from_id == MANAGER_ID:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = manager_panel)    
    
    elif message.text == '/order' and message.from_id != MANAGER_ID:
        await bot.send_message(message.from_id, '–Ø –ø–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup = user_panel)    


@dp.message_handler(content_types = 'text')
async def msg_handler_func(message: types.Message):
    global orders

    #* developer commads handling
    if message.text.lower() == '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑' and message.from_id == 798330024:
        await bot.send_message(message.from_id, '–ù–∞—á–Ω—ë–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n–¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É –Ω–∞—Å –∑–∞–∫–∞–∑–∞—Ç—å', reply_markup = ReplyKeyboardRemove())
        update_database()
        catalog_string = ''
        for i in get_products(update_database()):
            if i == 'product name':
                continue
            catalog_string += f'{i}\n'
        await bot.send_message(MANAGER_ID, catalog_string)
        await Form.product.set()

    elif message.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' and message.from_id == 798330024:
        stat_string = ''
        for i in showstats().items():
            stat_string += f'{i[0]}: {i[1]}\n'
        await bot.send_message(message.from_id, stat_string)

    elif message.text.lower() == '–æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' and message.from_id == 798330024:
        try:
            clear_stats()
            await bot.send_message(798330024, 'stats cleard successfully')
            print(f'clear stats: True\nstats: {showstats()}')
        except Exception as e:
            await bot.send_message(798330024, f'[error]: in clearing stats -> {e}')
            print(f'[error]: in clearing stats -> {e}')

    elif message.text.lower() == '–æ—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã' and message.from_id == 798330024:
        orders = []
        print(f'[log]: all info from "orders" was deleted -> orders: {orders}')
        await bot.send_message(message.from_id, '–≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ "orders" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')

    elif message.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã' and message.from_id == 798330024:
        await bot.send_message(798330024, orders)

    elif message.text.lower() == '–æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞' and message.from_id == 798330024:
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id)
        quit()

    #* basic user commands handling
    elif message.text.lower() == '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üí®':
        await bot.send_message(message.from_id, '–ù–∞—á–Ω—ë–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n–¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É –Ω–∞—Å –∑–∞–∫–∞–∑–∞—Ç—å', reply_markup = ReplyKeyboardRemove())
        update_database()
        catalog_string = ''
        for i in get_products(update_database()):
            if i == 'product name':
                continue
            catalog_string += f'{i}\n'
        await bot.send_message(message.from_id, catalog_string)
        await Form.product.set()

    elif message.text.lower() == '‚≠êÔ∏è–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤‚≠êÔ∏è':          
        await bot.send_message(message.from_id, 'todo: —Å–æ–∑–¥–∞—Ç—å —Ç–≥ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —ç—Ç–æ—Ç —Ç–≥ –∫–∞–Ω–∞–ª')
    
    elif message.text.lower() == 'üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Äüë∑‚Äç‚ôÇÔ∏è':
        await bot.send_message(message.from_id, '<a href="https://t.me/oleg_supp">üë∑‚Äç‚ôÇÔ∏è–Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Äüë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')

    #* manager commands handling
    elif message.text == 'üìä–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' and message.from_id == MANAGER_ID:
        update_database()
        stat_string = ''
        for i in showstats().items():
            stat_string += f'{i[0]}: {i[1]}\n'
        await bot.send_message(message.from_id, stat_string)

    elif message.text == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥üìã' and message.from_id == DEVELOPER_ID:
        update_database()
        catalog_string = ''
        for i in get_products(update_database()):
            catalog_string += f'{i}\n'
        await bot.send_message(MANAGER_ID, catalog_string)

@dp.message_handler(state = Form.product)
async def choose_product(message: types.Message, state: FSMContext):
    global data, dt, orders

    await state.update_data(product = message.text.lower())
    data = await state.get_data()

    #* cheking if product that user choosed is available
    available_product = check_product(data['product'].lower()) == True
    print('passing product check: ', available_product)

    if available_product == False:
        await bot.send_message(message.from_id, '–ö —Å–æ–∂–∞–ª–µ–Ω—å—é —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        await Form.product.set()
    else:
        dt = data
        user_data[message.from_user.username]['product'] = data['product']

        print(f'[log]: user - {message.from_user.username} orders - {data["product"]}')

        await bot.send_message(message.from_id, '–æ—Ç–ª–∏—á–Ω–æ!\n—Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—à—å—é –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–º–æ–∂–µ–º –≤—ã—Å–ª–∞—Ç—å –≤–∞–º –≤–∞—à –∑–∞–∫–∞–∑\n–§.–ò.–û. - –ì–æ—Ä–æ–¥ - –¢–æ–≤–∞—Ä - –ü–æ—á—Ç–æ–≤–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –∏ –∏–Ω–¥–µ–∫—Å - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        await Form.main_info.set()

@dp.message_handler(state = Form.main_info)
async def getting_main_info(message: types.Message, state: FSMContext):
    global data, dt, orders

    await state.update_data(info = message.text)
    await state.update_data(username = message.from_user.username)
    data = await state.get_data()

    user_data[message.from_user.username]['main_info'] = data['info']

    #* creating inline menu with username
    ACCEPT_MENU = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text = f'–æ—Ç–∫–ª–æ–Ω–∏—Ç—å {user_data[message.from_user.username]["username"]}', callback_data = f'reject'), 
            InlineKeyboardButton(text = f'–æ–¥–æ–±—Ä–∏—Ç—å {user_data[message.from_user.username]["username"]}', callback_data = f'accept')]
        ]
    ) 

    #* sending all info that user sended to the manager 
    await bot.send_message(message.from_id, 'üì§–æ—Ç–ª–∏—á–Ω–æ, —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—éüì§\n–æ–∂–∏–¥–∞–π—Ç–µ, –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ')
    await bot.send_message(MANAGER_ID, f'@{message.from_user.username}\n\
product: {user_data[message.from_user.username]["product"]}\n\
place: {user_data[message.from_user.username]["main_info"]}üì•', reply_markup = ACCEPT_MENU)
        
    await state.finish()


@dp.callback_query_handler()
async def moderation_func(call: types.CallbackQuery):
    global orders
    print(user_data)

    if call.data == 'reject':
        for name in user_data:
            if name in call.message.text:
                print(name)
                await bot.send_message(user_data[name]['id'], '‚ùå–≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–æ–∫–ª–æ–Ω—ë–Ω‚ùå\n–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â—è–π—Ç–µ—Å—å –∫ \n<a href = "https://t.me/c0dem">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä—Éüë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')

    elif call.data == 'accept':
        for name in user_data:
            if name in call.message.text:
                changestats(user_data[data["username"]]["product"].lower())
                orders.append(user_data[data["username"]]["product"])
                print(name)
                print(orders)

                await bot.send_message(user_data[name]['id'], f'‚ú®–≤–∞—à –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω‚ú®\n  \n<a href = "https://t.me/c0dem">üë∑‚Äç‚ôÇÔ∏è–º–µ–Ω–µ–¥–∂–µ—Ä—Éüë∑‚Äç‚ôÇÔ∏è</a>', parse_mode = 'HTML')
                await buy(call.message, data, user_data)

    await bot.send_message(user_data[name]['id'], 'üîÑ–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞–∫–∞–∑, —Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—ã–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–º–∞–Ω–¥—É: /order')                                                                                                                                                                

async def buy(message: types.Message, data, user_data):
    if PAYMENT_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(user_data[data["username"]]["id"], "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    product = user_data[data["username"]]["product"]
    photo_link = 'https://www.apple.com/newsroom/images/product/airpods/standard/Apple_AirPods-Pro_New-Design_102819_big.jpg.large.jpg'
    for x, y in product_photo.items():
        if x == product:
            photo_link = y

    # PRICE = types.LabeledPrice(label=f'–ø–æ–∫—É–ø–∫–∞ {product}\n–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', 
    #                            amount = int( ( ( ( ( get_price(product) * 27.40 * 100 ) / 100 * get_sale(product) ) / 2 ) ) / 100)
    
    PRICE = types.LabeledPrice(label = product, amount = int( (((1000 * 27.40 * 100) / 100 * 70)/2)/100) ) # 100 rub 70% –æ—Ç 100 = 70
    
    await bot.send_invoice(user_data[data["username"]]["id"],
                           title="–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞",
                           description=f'–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ {product}\n–≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ c —É—á—ë—Ç–æ–º –∞–∫—Ü–∏–∏, –∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –º—ã –≤—ã—à–ª–µ–º –≤–∞–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä, –≤–∞–º –Ω—É–∂–Ω–æ —é—É–¥–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å',
                           provider_token=PAYMENT_TOKEN,
                           currency="rub",
                           photo_url=photo_link,
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE],
                           payload="test-invoice-payload")

# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# successful payment
@dp.message_handler(content_types= ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    await bot.send_message(user_data[data["username"]]["id"], f"‚úÖ–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ‚úÖ")

if __name__ == '__main__':
    executor.start_polling(dp)
#| coded by codem